# SystemVerilog - Data Types

`logic`

`bit`

`byte`

`int`

`string`

### Enumerations

```verilog
enum          {RED, YELLOW, GREEN}         light_1;         // int type; RED = 0, YELLOW = 1, GREEN = 2
enum bit[1:0] {RED, YELLOW, GREEN}         light_2;         // bit type; RED = 0, YELLOW = 1, GREEN = 2

// A custom data-type can be created so that the same data-type may be used to declare other variables.

typedef enum {TRUE, FALSE} e_true_false;
e_true_false  answer;
answer = TRUE;
```

## Arrays

### Static Array

### Dynamic Array

```verilog
[data_type] [identifier_name]  [];

bit [7:0] 	stack []; 		// A dynamic array of 8-bit vector
string 		names []; 		// A dynamic array that can contain strings


int 	array [];

initial
array = new [3];
// This creates one more slot in the array, while keeping old contents
array = new [array.size() + 1] (array);
```

Methods:

size()

delete()

### Associative Array

```systemverilog
int 		m_data [int]; 			// Key is of type int, and data is also of type int
int 		m_name [string]; 		// Key is of type string, and data is of type int

m_name ["Rachel"] = 30;
m_name ["Orange"] = 2;

m_data [32'h123] = 3333;
```

### Queue

```systemverilog
int 	m_queue [$]; 		// Unbound queue, no size


m_queue.push_back(23); 		// Push into the queue

int data = m_queue.pop_front(); // Pop from the queue
```

### Packed Array

There are two types of arrays: packed and unpacked

A packed array is guaranteed to be represented as a contiguous set of bits.

```systemverilog
bit [3:0] 	data; 			// Packed array or vector
logic 		queue [9:0]; 	// Unpacked array
```

Example of multi-dimensional packed array:

```systemverilog
bit [2:0][3:0][7:0] 	m_data; 	// An MDA, 12 bytes

initial begin
    // 1. Assign a value to the MDA
    m_data[0] = 32'hface_cafe;
    m_data[1] = 32'h1234_5678;
    m_data[2] = 32'hc0de_fade;
end
```

### Unpacked Array


## Structs

```systemverilog
// Structures -> a collection of variables of different data types
struct {
	byte    val1;
	int     val2;
	string  val3;
} struct_name;

// use typedef to actually make it a type

typedef struct {
    string fruit;
    int    count;
    byte 	 expiry;
} st_fruit;
```

Packed vs unpacked struct. Struct is unpacked by default

A packed structure is a mechanism for subdividing a vector into fields that can be accessed as members and are packed together in memory without gaps.

```systemverilog
typedef struct packed {
  bit [3:0] mode;
  bit [2:0] cfg;
  bit       en;
} st_ctrl;
```

## User-Defined Types

```systemverilog
// Declare an alias for this long definition
typedef unsigned shortint 			u_shorti;
typedef enum {RED, YELLOW, GREEN} 	e_light;
typedef bit [7:0]  					ubyte;
```

### Alias

alias keyword