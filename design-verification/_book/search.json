[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Design Verification",
    "section": "",
    "text": "Preface\nNotes on Design Verification. The notes will mainly cover verification concepts, Verilog and SystemVerilog, and UVM. Pre-req: digital logic design fundamentals (see my Digital Logic Design notebook). Common interviews can be found in the Questions chapters.\n\n\nResources\nSome relevant resources:\n\nChipVerify\nVerification Guide\nVerification Academy\nHDLBits\nBSG SystemVerilog Coding Standards\n\nUVM Specific Resources: - ClueLogic\nTextbooks:\n\nBook 1\n\nFor playing around with simulations:\n\nEDA Playground\n\nList of interview questions: - Verification Guide - ASIC Verification Interview Questions - Verification Guide - SOC Verification Interview Questions - Verification Guide - UVM Interview Questions - Verification Guide - SystemVerilog Interview Questions - ChipVerify - Verilog Interview Set 1 - More can be found on their website - ChipVerify - SystemVerilog Interview Set 1 - More can be found on their website - ChipVerify - UVM Interview Set 1 - More can be found on their website - NAND LAND - FPGA Interview Questions",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1 Perspective\nThis note does …",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#perspective",
    "href": "intro.html#perspective",
    "title": "1  Introduction",
    "section": "",
    "text": "Note 1.1: Definition - Some definition\n\n\n\nTerm is defined as blah blah blah…",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#high-level-ideas",
    "href": "intro.html#high-level-ideas",
    "title": "1  Introduction",
    "section": "1.2 High Level Ideas",
    "text": "1.2 High Level Ideas",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary…",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "questions-fundamentals.html",
    "href": "questions-fundamentals.html",
    "title": "3  Questions - Fundamentals of Verification",
    "section": "",
    "text": "3.1 Verification Concepts\nKey concepts:\nQ: What is the way to start verifying a design after finishing designing?\nQ: What are the steps to verify a design?\nQ: What conversations would you have while working with the designer?\nQ: After functional simulation and no more bugs, will there be more bugs that will be caught in the emulation / gate level simulation stages?\nQ: How would you verify an asynchronous design?\nQ: CDC Question: What is the way to get a data input from an asynchronous signal?\nQ: Imagine a case where your coverage events are not correct. Top bins are not being hit. Why might this be the case? Brainstorm possible reasons why top bins are being hit?\nA:  Possible reasons include driver issue, constraint being wrong\nQ: Who do DV teams interact with?\nQ: What are differences between SoC level verification vs IP/Component level verification?\nQ: Design sign-off: when and how?\nQ: There are always logical bugs found post-silicon. What to do about those?\nQ: Coverage - FSM, toggle, branch, code, functional",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Questions - Fundamentals of Verification</span>"
    ]
  },
  {
    "objectID": "questions-fundamentals.html#test-plans",
    "href": "questions-fundamentals.html#test-plans",
    "title": "3  Questions - Fundamentals of Verification",
    "section": "3.2 Test Plans",
    "text": "3.2 Test Plans\nQ: Given a DUT block diagram and timing diagram, try to come up with a verification plan to verify it\nQ: Come up with a verification plan for priority arbiter with ack. What test cases would you run? What is your test plan? How would you structure your testbench?\nQ: Given a round robin arbiter, where each input to the round robin arbiter is a FIFO, how would you verify this module?\nQ: Verification plan - table of contents",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Questions - Fundamentals of Verification</span>"
    ]
  },
  {
    "objectID": "questions-fundamentals.html#constraints",
    "href": "questions-fundamentals.html#constraints",
    "title": "3  Questions - Fundamentals of Verification",
    "section": "3.3 Constraints",
    "text": "3.3 Constraints\nQ: You have 4 animal types: Dog, Cat, Sheep, Horse. Each dog can eat exactly 4 apples, each cat can eat exactly 3 apples, each sheep can eat exactly 1 apple, and each horse can eat exactly 10 apples. There are a total of 1024 apples. Write a constraint such that all animal types in total will eat more than 16 apples.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Questions - Fundamentals of Verification</span>"
    ]
  },
  {
    "objectID": "questions-logic.html",
    "href": "questions-logic.html",
    "title": "4  Questions - Logic Design & Basics of Digital Systems",
    "section": "",
    "text": "4.1 Digital System Basics\nKey concepts:\nQ: Calculation of gigabits and speed\nQ: How do you tell if your system is little endian or big endian?\nQ: Constraint question: You have a total memory size of 4096 bytes. Each page can be 32, 64, 128 bytes. Each page must be aligned. Write a constraint / function that generates a random range that satisfy this constraint",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Questions - Logic Design & Basics of Digital Systems</span>"
    ]
  },
  {
    "objectID": "questions-logic.html#fifos",
    "href": "questions-logic.html#fifos",
    "title": "4  Questions - Logic Design & Basics of Digital Systems",
    "section": "4.2 FIFOs",
    "text": "4.2 FIFOs\nQ: Asynchronous FIFO qustion (with dual port RAM): gray code? FIFO depth is 10, read/write pointers is 4 bits wide. What should the initial value of the read/write pointers be?\nQ: How would you implement this: An asynchronous FIFO, with 8bit read port and 16 bit write port, and the pointers are encoded in gray code",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Questions - Logic Design & Basics of Digital Systems</span>"
    ]
  },
  {
    "objectID": "questions-logic.html#static-timing-analysis",
    "href": "questions-logic.html#static-timing-analysis",
    "title": "4  Questions - Logic Design & Basics of Digital Systems",
    "section": "4.3 Static Timing Analysis",
    "text": "4.3 Static Timing Analysis\nQ: Static timing analysis - given a logic circuit and some delay values, what will the setup and hold time be? How about the maximum clock frequency (given some constraints, circuit, etc)?\nQ: (not really STA but timing): How do you delay a signal by N cycles?",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Questions - Logic Design & Basics of Digital Systems</span>"
    ]
  },
  {
    "objectID": "questions-logic.html#sequential-logic-design",
    "href": "questions-logic.html#sequential-logic-design",
    "title": "4  Questions - Logic Design & Basics of Digital Systems",
    "section": "4.4 Sequential Logic Design",
    "text": "4.4 Sequential Logic Design\nEntries inserted into a buffer. You have to choose the oldest request among those that are ready. Optimize for power\nQ: Regarray vs Flops. Indirect branches",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Questions - Logic Design & Basics of Digital Systems</span>"
    ]
  },
  {
    "objectID": "questions-logic.html#logic-design---general",
    "href": "questions-logic.html#logic-design---general",
    "title": "4  Questions - Logic Design & Basics of Digital Systems",
    "section": "4.5 Logic Design - General",
    "text": "4.5 Logic Design - General\nQ: Design a circuit to divide the clock frequency by 4 (f/4) - in sychronous way and asynchronous way\nQ: Design a circuit to divide the clock frequency by 3 - 50 % duty cycle\nQ: How do you build a larger priority encoder from smaller priority encoders (16:4 from 4:1)?\nQ: How do you design an edge detector? How about an edge detector that also detects glitched edges? (normal edge detector circuit does not detect if the transition is from x-&gt;x’-&gt;x)\nQ: How are latches different from flip-flops?\nQ: What are the different types of latches? What about flip-flops?",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Questions - Logic Design & Basics of Digital Systems</span>"
    ]
  },
  {
    "objectID": "questions-logic.html#fpgas",
    "href": "questions-logic.html#fpgas",
    "title": "4  Questions - Logic Design & Basics of Digital Systems",
    "section": "4.6 FPGAs",
    "text": "4.6 FPGAs\nQ: How do FPGAs work? How are they programmable?\nQ: How to fix setup and hold time in an FPGA?\nQ: What are some data structures used in an FPGA?\nQ: How is coding Verilog on FPGA different from ASIC?",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Questions - Logic Design & Basics of Digital Systems</span>"
    ]
  },
  {
    "objectID": "questions-arch.html",
    "href": "questions-arch.html",
    "title": "5  Questions - Computer Architecture",
    "section": "",
    "text": "5.1 ISA\nKey concepts:\nQ: ISA has a set of compressed instructions. Should find the instruction using LSB. Each inst can take one or two lines based on the type. The section selected can start from an inst or an half inst of an uncompressed.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Questions - Computer Architecture</span>"
    ]
  },
  {
    "objectID": "questions-arch.html#in-order-cpu",
    "href": "questions-arch.html#in-order-cpu",
    "title": "5  Questions - Computer Architecture",
    "section": "5.2 In-Order CPU",
    "text": "5.2 In-Order CPU\nQ: Explain how a 5-stage pipeline works\nQ: Why don’t we make in-order pipelines deep? Why not make pipelines of anything in general deep (general tradeoffs)?\nQ: What are the hazards in an in-order pipeline? How are they detected? What causes them? How does moving towards OoO help with each?",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Questions - Computer Architecture</span>"
    ]
  },
  {
    "objectID": "questions-arch.html#ooo-cpu-design",
    "href": "questions-arch.html#ooo-cpu-design",
    "title": "5  Questions - Computer Architecture",
    "section": "5.3 OoO CPU Design",
    "text": "5.3 OoO CPU Design\nQ: LSQ. How does it work\nQ: (in your project), how did you decoder work?\nQ: (in your project), how did you try to optimize your design?\nQ: (in your project), what are the sizes of your reservation station, reorder buffer, store queue, other buffers, etc? How did you find that it is the best size?\nQ: (in your project) Explain the register path of your project, from the free list to back\nQ: What are the differences/tradeoffs between a distributed reservation station and a centralized reservation state?\nQ: Explain Tomasulo\nQ: What are the different types of hazards in an OoO design? How are they detected and dealt with?",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Questions - Computer Architecture</span>"
    ]
  },
  {
    "objectID": "questions-arch.html#memory-architecture-caches",
    "href": "questions-arch.html#memory-architecture-caches",
    "title": "5  Questions - Computer Architecture",
    "section": "5.4 Memory Architecture, Caches",
    "text": "5.4 Memory Architecture, Caches\nQ: How would you determine if the requested data is available in the cache?\nQ: What LRU policy do you use? (in project setting or for specific scenario)\nQ: Assume a scenario where a cache line gets evicted and immediately the CPU Wants the same cache line. What should you do?\nQ: What type of cache did you use? (for project setting or specific scenario)\nQ: NUMA vs UMA. Differences and tradeoffs?\nQ: Virtual memory, and TLBs. How do they work, what are they for?\nQ: Aliasing of memory addresses in a cache. How to solve aliasing and conflict misses?\nQ: What are the different types of cache misses?\nQ: What are the different types of cache writeback policies and eviction policies?\nQ: You have a 16-way cache. How would you speed it up?\nQ: In cache design, explain the differences/tradeoffs between DM vs FA vs SA. What situations would you use them in?\nQ: True LRU vs Pseudo LRU\nQ: True LRU: How many bits to implement?\nQ: Given an age vector for a LRU cache and a valid/invalid vector, how would you choose which way to evict?\nQ: Prefetcher and I-cache logics\nQ: (for your project) implementation details on your Load Store Queue\nQ: Come up with cache access patterns in which FA would perform better than DM. In general: come up with a cache access pattern that performs better for each of DM, FA, SA\nQ: Write back vs Write through, MRU vs LRU. (and what did you do in your project and how you went about choosing this?)\nQ: Non-blocking D-cache and how you implement it?\nQ: Virtual memory, VIPT. Explain",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Questions - Computer Architecture</span>"
    ]
  },
  {
    "objectID": "questions-arch.html#branch-prediction",
    "href": "questions-arch.html#branch-prediction",
    "title": "5  Questions - Computer Architecture",
    "section": "5.5 Branch Prediction",
    "text": "5.5 Branch Prediction\nQ: Perceptron, what is it? Equation? How do you implement it in hardware?",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Questions - Computer Architecture</span>"
    ]
  },
  {
    "objectID": "questions-arch.html#memory-coherency",
    "href": "questions-arch.html#memory-coherency",
    "title": "5  Questions - Computer Architecture",
    "section": "5.6 Memory Coherency",
    "text": "5.6 Memory Coherency\nQ: What is memory coherence and why is it needed?\nQ: MSI protocol. What is it, how does it work?\nQ: MSI, MESI, MOESI: why was each extra state added?\nQ: Draw the state diagram for MESI",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Questions - Computer Architecture</span>"
    ]
  },
  {
    "objectID": "questions-arch.html#memory-consistency",
    "href": "questions-arch.html#memory-consistency",
    "title": "5  Questions - Computer Architecture",
    "section": "5.7 Memory Consistency",
    "text": "5.7 Memory Consistency\nQ: Consistency basics, what is memory consistency and why is it needed?\nQ: Given a sequence of instructions on 2 cores, which values are possible/not possible - how would you check if a barrier is working?",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Questions - Computer Architecture</span>"
    ]
  },
  {
    "objectID": "questions-coding.html",
    "href": "questions-coding.html",
    "title": "6  Questions - Coding (Non-HDL)",
    "section": "",
    "text": "6.1 Bit Manipulation\nCommon “software” coding questions, concepts, and ideas asked in a design verification interview:\nQ: Bit manipulation leetcode questions",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Questions - Coding (Non-HDL)</span>"
    ]
  },
  {
    "objectID": "questions-coding.html#strings",
    "href": "questions-coding.html#strings",
    "title": "6  Questions - Coding (Non-HDL)",
    "section": "6.2 Strings",
    "text": "6.2 Strings\nQ: String matching regex\nQ: Parse a string in Python: Given a .txt file, parse the file and print the frequency of each word, printed by ordering of most frequent first.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Questions - Coding (Non-HDL)</span>"
    ]
  },
  {
    "objectID": "questions-coding.html#data-structures",
    "href": "questions-coding.html#data-structures",
    "title": "6  Questions - Coding (Non-HDL)",
    "section": "6.3 Data Structures",
    "text": "6.3 Data Structures\nQ: Code up a class for a stack, including functions for push and pop\nQ: Write C++ code to move value to the front of an array\nQ: Write C++ code to find the second minimum of an array\nQ: Two ints are represented as a linked list. Create a new linked list that is the sum of these two integers\nQ: How do you build a queue from a stack? How do you build a stack from a queue?",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Questions - Coding (Non-HDL)</span>"
    ]
  },
  {
    "objectID": "questions-coding.html#recursioniteration",
    "href": "questions-coding.html#recursioniteration",
    "title": "6  Questions - Coding (Non-HDL)",
    "section": "6.4 Recursion/Iteration",
    "text": "6.4 Recursion/Iteration\nQ: Write a function to calculate the factorial of a given number. Recursively and iteratively\nQ: Write a function to output the fibonacci sequence recursively. How about iteratively? What are the differences (especially in terms of complexity)?\nQ: Deleting objects at the end after execution (freeing up dynamic memory): use linked list, vector, or a counter",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Questions - Coding (Non-HDL)</span>"
    ]
  },
  {
    "objectID": "questions-coding.html#object-oriented-design",
    "href": "questions-coding.html#object-oriented-design",
    "title": "6  Questions - Coding (Non-HDL)",
    "section": "6.5 Object-Oriented Design",
    "text": "6.5 Object-Oriented Design\nQ: What is polymorphism? What is inheritance?\n\nLinkedIn Post - Polymorphism in DV Interview",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Questions - Coding (Non-HDL)</span>"
    ]
  },
  {
    "objectID": "questions-coding.html#others",
    "href": "questions-coding.html#others",
    "title": "6  Questions - Coding (Non-HDL)",
    "section": "6.6 Others",
    "text": "6.6 Others\nQ: Write the pseudocode for how you would go about solving the traveling salesman problem\nQ: Write code for a card game in C++: Black jack - shuffle, deal, and check the sum is equal to a value. If greater then lose. If rounds are complete, then highest wins\nQ: Write code to perform matrix multiplication in C++\nQ: Write C++ code to implement LRU. What is the time complexity?\nQ: Loop interchange - to improve cache hit rate\nQ: Compilers - register renaming\nQ: How would you code Fibonacci in assembly?",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Questions - Coding (Non-HDL)</span>"
    ]
  },
  {
    "objectID": "questions-coding.html#scripting",
    "href": "questions-coding.html#scripting",
    "title": "6  Questions - Coding (Non-HDL)",
    "section": "6.7 Scripting",
    "text": "6.7 Scripting\nQ: In Python, parse a file line-by-line and finding the minimum time for a particular bucket id given this file structure: TASK_ID | STATUS | COMMAND_LINE | BUCKET_ID | TIME (HH:MM:SS)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Questions - Coding (Non-HDL)</span>"
    ]
  },
  {
    "objectID": "questions-verilog.html",
    "href": "questions-verilog.html",
    "title": "7  Questions - Verilog",
    "section": "",
    "text": "7.1 Online References\nKey concepts\nQ: Given some Verilog code (blocking vs non-blocking assignment), what will these synthesize to?\nQ: Code fizz buzz in Verilog\nQ: How does polymorphism work in SystemVerilog?\nQ: How do virtual interface work in SystemVerilog?\nQ: What do clocking blocks do in SystemVerilog? What are they?\nQ: Differences between Verilog and SystemVerilog?\nQ: Code a sequence (pattern) detector state machine. How would you verify this state machine?\nQ: SV data structures: queues, maps, associative array, dynamic array\nQ: Write the code for a FIFO in SystemVerilog\nQ: SystemVerilog Fork, Join(). Given some example code with these, what would happen to a task (e.g. a given task could take forever)? What could you do to fix it (e.g. by writing a task to print ERROR if a task doesn’t return by TIMEOUT seconds)?\nQ: Traffic light signaling problem in Verilog (state machine). Use counter and output color depending on range using assign statements\nQ: Given an FSM state diagram, code it in SystemVerilog\nQ: Logic vs wire vs bit in Verilog/SystemVerilog\nQ: Write the RTL to generate a signal that is clock for 3 cycles then 0 for 3 cycles\nQ: Given 3 enums, constrain 32 bits to be within these 3 enums. Then constrain their distribution\nQ: SystemVerilog Assertions. Write assertions for Req and Ack with the given spec:\nQ: CAM & TCAM in SystemVerilog. Modeling with 2D/3D array vs associative array (key as data, addr as value), and pros and cons of these approaches\nQ: Write a module to convert binary to gray code (how about vice versa)?",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Questions - Verilog</span>"
    ]
  },
  {
    "objectID": "questions-verilog.html#online-references",
    "href": "questions-verilog.html#online-references",
    "title": "7  Questions - Verilog",
    "section": "",
    "text": "Blind Post - Design Verification Interview",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Questions - Verilog</span>"
    ]
  },
  {
    "objectID": "questions-uvm.html",
    "href": "questions-uvm.html",
    "title": "8  Questions - UVM",
    "section": "",
    "text": "Q: What UVM phase is different from the others, and why?\nQ: UVM Polymorphism question, child handle",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Questions - UVM</span>"
    ]
  }
]