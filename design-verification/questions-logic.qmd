# Questions - Logic Design & Basics of Digital Systems

Key concepts:

- Basics of logic design
- Basics of digital systems (bits/bytes, hex/bin/dec, throughput/latency, metrics, conversions, etc)
- FIFOs (synchronous and asynchronous)
- Arbiters
- Static timing analysis
- FSMs
- FPGA related roles will ask FPGA-specific optimizations/concepts as well

## Digital System Basics

**Q: Calculation of gigabits and speed**

**Q: How do you tell if your system is little endian or big endian?**

**Q: Constraint question: You have a total memory size of 4096 bytes. Each page can be 32, 64, 128 bytes. Each page must be aligned. Write a constraint / function that generates a random range that satisfy this constraint**

**Q: Gray codes, why? How to convert from binary?**

1 bit flip between consecutive numbers. To convert from binary, keep the MSB, for subsequent bits, take the XOR of corresponding binary bit and the previous (more significant) binary bit. A Verilog conversion looks something like this:

```verilog
module binary_to_gray #(parameter WIDTH = 4) (
    input  [WIDTH-1:0] binary,
    output [WIDTH-1:0] gray
);
    assign gray = binary ^ (binary >> 1);
endmodule
```

A gray code counter can be implemented as follows ([Source: ChipVerify](https://www.chipverify.com/verilog/verilog-gray-counter)):

```verilog
module gray_ctr
  # (parameter N = 4)

  (	input 	clk,
	input 	rstn,
	output reg [N-1:0] out);

	reg [N-1:0] q;

	always @ (posedge clk) begin
		if (!rstn) begin
    	q <= 0;
    		out <= 0;
      end else begin
  		q <= q + 1;

`ifdef FOR_LOOP
        // For loop implementation
    	for (int i = 0; i < N-1; i= i+1) begin
      	out[i] <= q[i+1] ^ q[i];
    	end
    	out[N-1] <= q[N-1];
`else
			out <= {q[N-1], q[N-1:1] ^ q[N-2:0]};
`endif
    end
	end
endmodule
```

Key ideais to 

**Q: What is parity bit?**

Even parity and odd parity, indicates whether the number of 1s in a binary string is even or odd. To compute the parity bit, take the XOR of all the bits, which gives us the even parity (0 = Even, 1 = Odd). To get odd parity, flip the even parity bit (e.g. by XORing it with 1).

## FIFOs

**Q: Asynchronous FIFO qustion (with dual port RAM): gray code? FIFO depth is 10, read/write pointers is 4 bits wide. What should the initial value of the read/write pointers be?**

**Q: How would you implement this: An asynchronous FIFO, with 8bit read port and 16 bit write port, and the pointers are encoded in gray code**



## Static Timing Analysis

**Q: Static timing analysis - given a logic circuit and some delay values, what will the setup and hold time be? How about the maximum clock frequency (given some constraints, circuit, etc)?**

**Q: (not really STA but timing): How do you delay a signal by N cycles?**

## Sequential Logic Design

**Entries inserted into a buffer. You have to choose the oldest request among those that are ready. Optimize for power**

**Q: Regarray vs Flops. Indirect branches**

## Logic Design - General

**Q: Design a circuit to divide the clock frequency by 4 (f/4) - in sychronous way and asynchronous way**

**Q: Design a circuit to divide the clock frequency by 3 - 50 % duty cycle**

**Q: How do you build a larger priority encoder from smaller priority encoders (16:4 from 4:1)?**

**Q: How do you design an edge detector? How about an edge detector that also detects glitched edges? (normal edge detector circuit does not detect if the transition is from x->x'->x)**

**Q: How are latches different from flip-flops?**

**Q: What are the different types of latches? What about flip-flops?**

**Q: Propagation of metastability...**

**Q: Design of hierarchical priority encoder?**

## FPGAs 

**Q: How do FPGAs work? How are they programmable?**

**Q: How to fix setup and hold time in an FPGA?**

**Q: What are some data structures used in an FPGA?**

**Q: How is coding Verilog on FPGA different from ASIC?**