# Tips on Solving DS&A Questions


## Problem Solving Flowchart

![Tips on problem approach.[Image Source](https://seanprashad.com/leetcode-patterns/)](images/tips/leetcode-patterns-tips.png){#fig-label fig-align="center" width="70%"}

## DS&A Roadmap

![A Roadmap for studying. [Source](https://neetcode.io/roadmap)](images/tips/neetcode-roadmap.png)

## Problem Flowchart

![A problem solving flowchart based on [AlgoMonster's flowchart](https://algo.monster/flowchart). Open the SVG in a new tab and zoom in/out for better viewing.](images/tips/algo-flowchart-svg.svg){#fig-label fig-align="center" width="200%"}

## ROI


![Studying to Maximizing ROI according to [AlgoMonster](https://algo.monster/problems/stats).](images/tips/algo-max-roi.png){#fig-label fig-align="center" width="200%"}

## "Academic" Algorithms

According to AlgoMonster, some **algorithms** that are very rarely/almost never asked in interviews:

- Minimal spanning tree: Kruskal's algorithm and Prim's algorithm
- Minimum cut: Ford-Fulkerson algorithm
- Shortest path in weight graphs: Bellman-Ford-Moore algorithm
- String search: Boyer-Moore algorithm


## Keyword to Algo

[AlgoMonster](https://algo.monster/problems/keyword_to_algo) provides a convenient "Keyword to Algorithm" summary:

"Top k"

- Heap
  - E.g. K closest points

"How many ways.."

- DFS
  - E.g. Decode ways
- DP
  - E.g. Robot paths

"Substring"

- Sliding window
  - E.g. Longest substring without repeating characters

"Palindrome"

- two pointers: Valid Palindrome
- DFS: Palindrome Partitioning
- DP: Palindrome Partitioning II

"Tree"

- shortest, level-order
  - BFS: Binary Tree Level-Order Traversal
- else: DFS: Max Depth

"Parentheses"

- Stack: Valid Parentheses


"Subarray"

- Sliding window: Maximum subarray sum
- Prefix sum: Subarray sum
- Hashmap: Continuous subarray sum

Max subarray

- Greedy: Kadane's Algorithm


"X Sum"

- Two pointer: Two sum

"Max/longest sequence"

- Dynamic programming, DFS: Longest increasing subsequence
- mono deque: Sliding window maximum

"Minimum/Shortest"

- Dynamic programming, DFS: Minimal path sum
- BFS: Shortest path

"Partition/split ... array/string"

- DFS: Decode ways

"Subsequence"

- Dynamic programming, DFS: Longest increasing subsequence
- Sliding window: Longest increasing subsequence

"Matrix"

- BFS, DFS: Flood fill, Islands
- Dynamic programming: Maximal square

"Jump"

- Greedy/DP: Jump game

"Game"

- Dynamic programming: Divisor game, Stone game

"Connected component", "Cut/remove" "Regions/groups/connections"

- Union Find: Number of connected components, Redundant connections

Transitive relationship

- If the items are related to one another and the relationship is transitive, then chances are we can build a graph and use BFS or Union Find.
  - string converting to another, BFS: Word Ladder
  - string converting to another, BFS, Union Find: Sentence Similarity
  - numbers having divisional relationship, BFS, Union Find: Evaluate Division

"Interval"

- Greedy: sort by start/end time and then go through sorted intervals Interval Pattern