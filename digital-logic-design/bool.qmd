# Boolean Algebra


## Simple Equations

Operator Precedence Rules:
1. NOT (highest priority)
2. AND
3. OR

A **truth table** relates the inputs to a combinational logic circuit to its outputs, showing output for every possible combination of inputs.

![](images/bool/truthtable.png)

To generalize, for a Boolean function with $N$ binary inputs:

- There are $2^N$ possible input combinations, i.e. number of rows in the truth table
- There are $2^{2^N}$ "semantically" different Boolean functions
  - Derivation: There are $2^N$ entries in the truth table. The output of each truth table entry takes on 2 possible values, thus there are $2^{2^N}$ different ways you can pick a combination of outputs. 

## Boolean Algebra Basics

Boolean Algebra is an algebra manipulating Boolean values of 0s and 1s.

We start with:

- **Axioms**: basic things about objects and operations that we assume to be true as the start
- Then using axioms we derive:
  - **Laws and theorems**: which allow us to manipulate Boolean expressions and perform simplifications
- Then we derive more sophisticated **properties** for manipulating Boolean equations

## Axioms

::: {#nte-axiom-binary .callout-note}
## Axiom - Binary
[A1] $a = 0$ if $a \neq 1$

[A1'] $a = 1$ if $a \neq 0$ 
:::

::: {#nte-axiom-complement .callout-note}
## Axiom - Complement
[A2] if $a = 0$, then $\bar{a} = 1$

[A2'] if $a = 1$, then $\bar{a} = 0$
:::

::: {#nte-axiom-AND-OR .callout-note}
## Axiom - AND and OR
[A3] $0 \cdot 0 = 0$

[A3'] $1 + 1 = 1$

[A4] $1 \cdot 1 = 1$

[A4'] $0 + 0 = 0$

[A5] $0 \cdot 1 = 1 \cdot 0 = 0$

[A5'] $1 + 0 = 0 + 1 = 1$
:::

## Single Variable Theorems

![A list of single variable theorems. Source: EECS270-W24](images/bool/single-var-theorems.png)

To prove the idempotency theorems [T3] and [T3']:

TODO:

## Two and Three Variable Theorems

![](images/bool/var-theorem-1.png)

![](images/bool/var-theorem-2.png)

## De Morgan's Law

![](images/bool/demorgan.png)

De Morgan's law essentially says that **negation distributes over AND and OR by inverting operators and complementing terms**. In simpler words, De Morgan's swaps ANDs and ORs while pushing the complements inside the variables.

## More Boolean Gates

![](images/bool/nandnor.png)

![](images/bool/xorxnor.png)

Note that XNOR can also be expressed by the symbol $\odot$.

## Functional Completeness

A set of operations is **functionally-complete (or universal)** if and only if all possible truth tables can be expressed entirely by means of operations from this set.

Basic functionally-complete operation sets:

- $\{ +, \cdot, '\}$ - by definition
- $\{ +, '\}$ - by De Morgan's 
- $\{ \cdot, '\}$ - by De Morgan's
- $\{ \uparrow \}$ - NAND can implement AND, OR, and NOT
- $\{ \downarrow \}$ - NOR can implement AND, OR and NOT

Note that XOR and XNOR by themselves are not functionally complete.

## Canonical Forms

![](images/bool/onoffset.png)

::: {#nte-literal-def .callout-note}
## Definition - Literal
**Literal**: a single variable or its complement

E.g.: $a, a'$
:::

::: {#nte-prod-term-def .callout-note}
## Definition - Product Term
**Product Term**: AND of (more than one) literals

E.g.: $abc, a'bc'$
:::

::: {#nte-sum-term-def .callout-note}
## Definition - Sum Term
**Sum Term**: OR of (more than one) literals

E.g.: $a+b+c, a+b'+c'$
:::


::: {#nte-sop-def .callout-note}
## Definition - Sum of Products (SOP)
**Sum of Products (SoP)**: sum of On Set input patterns, i.e. the OR of minterms (product terms)

E.g.: $F = a'b'c + a'bc' + ab'c' + abc$ is the SOP of the example truth table above (blue rows).
:::

::: {#nte-pos-def .callout-note}
## Definition - Product of Sums (POS)
**Product of Sums (PoS)**: product of Off Set input patterns, i.e. the AND of maxterms (sum terms)

E.g.: $F = (a+b+c)(a+b’+c’)(a’+b+c’)(a’+b’+c)$ is the POS of the example truth table above (red rows).
:::

Notice that the POS and SOP can be derived from each other via De Morgan's: $F_{POS} = \bar{F}_{SOP}$. Due to this De Morgan's derivation, notice how essentially the product and sum terms have the variables in complement.

## Minterms & Maxterms

::: {#nte-norm-term-def .callout-note}
## Definition - Normal Term
**Normal Term**: product or sum term in which every variable appears once

E.g.: For function $F(a,b,c,d)$, terms $ab'cd', a+b+c+d'$ are normal terms
:::

::: {#nte-minterm-def .callout-note}
## Definition - Minterm
**Minterm**: Normal product

E.g.: For function $F(a,b,c)$, $ab'c, a'b'c'$ are minterms.
:::

::: {#nte-maxterm-def .callout-note}
## Definition - Maxterm
**Maxterm**: Normal sum

E.g.: For function $F(a,b,c)$, $(a+b'+c), (a'+b'+c')$ are maxterms.
:::

![](images/bool/minmaxtable.png)

Each input combination has a corresponding minterm and maxterm.

## Canonical Form

A **canonical form** is a representation such that every object has a unique representation. Do note that canonical form $\neq$ minimal form.

![](images/bool/canonical.png)

Notice how the SOP and POS have **mutually exclusive** set of indices!

## Shannon's Expansion Theorem

A Boolean function may be expanded with respect to any of its variables.

::: {#nte-shannon-exapnsion .callout-note}
## Theorem - Shannon's Expansion Theorem
**Shannon's Expansion Theorem**, a.k.a. Boole's Expansion Theorem, Shannon Decomposition: 
$$F(X_1, X_2, \ldots, X_n) = X_1 \cdot F(1, X_2, \ldots, X_n) + X_1' \cdot F(0, X_2, \ldots, X_n)$$
:::

This can help us with MUX-based logic function implementations:

![](images/bool/mux-1.png)

![](images/bool/mux-2.png)

## Logic Minimization

- Reducing a logical expression to a simpler equivalent representation

### Strategies

Can minimize via algebraic manipulations:

1. Construct truth table
2. Construct on sets and construct SOP
3. Use Boolean Algebra axioms and theorems to simplify

Another way is through K-Maps, touched below:

## Karnaugh Maps (K-Maps)

Method of representing a truth table that helps visualize adjacencies

Construction:

1. Split inputs into 2 evenly-sized groups
   1. One group will have an extra variable if given an odd number of inputs
2. Write all combinations, with successive combinations changing only 1 input (i.e. Gray Code)

![](images/bool/2-3-kmap.png)

![](images/bool/4-kmap.png)

### Side Note: Gray Codes

aka reflected binary code (RBC), reflected binary (RB)

**Gray Code**: An ordering of the binary numeral system such that two successive values differ in only 1 bit.

Uses of gray codes:

- K-Maps (to help visualize adjacencies, since consecutive gray codes only differ by 1 bit, thus logically "adjacent" when mapped)
- Help simplify switching in counting, again, since consecutive numbers differ by 1

| Lucal code | 5 | 4 | 3 | 2 | 1 |
|------------|---|---|---|---|---|
| Gray code  |   | 4 | 3 | 2 | 1 |
| 0          | 0 | 0 | 0 | 0 | 0 |
| 1          | 0 | 0 | 0 | 0 | 1 |
| 2          | 0 | 0 | 0 | 1 | 1 |
| 3          | 0 | 0 | 0 | 1 | 0 |
| 4          | 0 | 0 | 1 | 1 | 0 |
| 5          | 0 | 0 | 1 | 1 | 1 |
| 6          | 0 | 0 | 1 | 0 | 1 |
| 7          | 0 | 0 | 1 | 0 | 0 |
| 8          | 0 | 1 | 1 | 0 | 0 |
| 9          | 0 | 1 | 1 | 0 | 1 |
| 10         | 0 | 1 | 1 | 1 | 1 |
| 11         | 0 | 1 | 1 | 1 | 0 |
| 12         | 0 | 1 | 0 | 1 | 0 |
| 13         | 0 | 1 | 0 | 1 | 1 |
| 14         | 0 | 1 | 0 | 0 | 1 |
| 15         | 0 | 1 | 0 | 0 | 0 |

### K-Map Usage

1. Fill out the table based on the logic expression
2. Identify groups of adjacent cells
   1. Only create groups in powers of 2 (single cells okay since 1 is a power of 2)
   2. Groups can wrap around in all directions (across the borders of the table)
   3. Each group becomes a product term in the output
   4. Larger groups become smaller terms (thus a simplification)
   5. Don't Cares can be treated as 1/0s if it is *advantageous* to do so
3. Simplify

Don't care minterms are represented with a 'd'. Implicants can include don't care cells, but no implicant should include ONLY don't care cells (must have at least a 1).

### Definitions

**Minterm**: a product term that includes each function input or its complement

**Implicant**: A product term that has non-empty intersection with a function On sets and does not intersect with its Off sets.

**Prime implicant**: An implicant that cannot be completely covered by a more general implicant.

**Essential prime implicant**: A prime implicant that covers an output of the function that no combination of other prime implicants is able to cover. 

Example. Prime Implicants vs Essential Prime Implicants

![](images/bool/pi.png)

![](images/bool/epi.png)

## Gates from Gates

Useful to know

![](images/bool/nandnor-inv-null.png)

![[Source](https://electronics.stackexchange.com/questions/588189/i-am-trying-to-implement-a-function-using-only-nand-gates)](images/bool/nand-to-gates.png)

NAND is the most common building block (due to circuit reasons, to sum, it is more compact and faster than other gates, primarily from its parallel PMOS pull-up network)

## Examples

**SOP to POS Question:**

![Source: EECS 270](images/bool/sop-pos-ex1.png)

**Shannon's Expansion - Maxterms:**

![Source: EECS 270](images/bool/maxterms-ex.png)

**SOP & POS from Truth Table:**

![Source: EECS 270](images/bool/sop-pos-ex2.png)

**Logic Minimization with K-Map:**

![](images/bool/kmap-ex.png)