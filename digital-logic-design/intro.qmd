# Introduction

## Perspective

![Digital Logic Design in the Computing Stack (figure from EECS270-W24)](images/intro/computing-stack.png){#fig-label fig-align="center" width="30%"}


::: {#nte-binary-def .callout-note}
## Definition - Digital
**Digital** signals represent information as *discrete* values, typically binary values where two valid states exist: 0 (low, false) or 1 (high, true).
:::

This notebook focuses on the design of **digital circuits**. We study both the logic/math used to build digital systems (Boolean algebra), as well as the circuit design implications (transistors, timing, etc). 


## (Very) High-Level Digital Circuit Design Flow

![High-level design flow of a digital circuit to be run on FPGA](images/intro/designflow.png){#fig-label fig-align="center" width="70%"}

The design flow of a digital circuit starts off with a problem statement or design specification. Digital circuits are then described by the designer in a **Hardware Description Language (HDL)**, most commonly **Verilog/SystemVerilog** or **VHDL**. The design is then simulated with a **testbench**, which feeds the design with test inputs. During **simulation**, we can use tools to inspect the state of the signals in the circuit to analyze, debug, and evaluate the design. At this point, such a **behavioral** description of the design merely describes the functionality and not yet its physical implementation. **Synthesis** maps the behavioral description of the design into **netlist** of standard cells, which indicates the physical mapping to circuit components. The **place and route** process then physically places the netlist of cells and routes the wires to connect the components, generating a hardware implementation.

This notebook will cover basic Verilog. For more in-depth notes on Verilog/SystemVerilog, please refer to my other [notebook]().